;;; lua-debug
;; implement
function M.launch(opts)
  ; verify launch arguments
  ; abort early if already running

  ; init logger
  ; spawn nvim instance for server
  ; detect if nvim is blocking
  ; set hook instance address
  ; clear messages
  ; launch server
  print("Server started on port " .. server.port)
  M.stop_freeze = false
	; create autocommand when exit
  if not opts or not opts.blocking then
    vim.schedule(function() M.prepare_attach(false) end)
  else
    ; wait attach blocking
  end

  return server
end

;; script variables
local nvim_server

;; spawn nvim instance for server
; if exists use custom for launching server
else
  ; launch headless instance with clean environment
end

;; script variables
local hook_address

;; set hook instance address
if not hook_address then
  hook_address = vim.fn.serverstart()
end

vim.fn.rpcrequest(nvim_server, 'nvim_exec_lua', [[debug_hook_conn_address = ...]], {hook_address})

;; launch server
local host = (opts and opts.host) or "127.0.0.1"
local port = (opts and opts.port) or 0
local server = vim.fn.rpcrequest(nvim_server, 'nvim_exec_lua', [[return require"osv".start_server(...)]], {host, port, opts and opts.log})
if server == vim.NIL then
	vim.api.nvim_echo({{("Server failed to launch on port %d"):format(port), "ErrorMsg"}}, true, {})
	; terminate adapter server process
	return
end

;; implement
function M.prepare_attach(blocking)
  local handlers = {}
  ; attach variables
  ; implement handlers
  local attach_now = function()
      ; redefine debug traceback
      ; set is attached
      ; attach to current instance
  end
  if blocking then
    ; wait for configuration
    attach_now()
  else
    ; non blocking wait for configuration then attach
  end
end

;; verify launch arguments
vim.validate {
  opts = {opts, 't', true}
}

if opts then
  vim.validate {
    ["opts.host"] = {opts.host, "s", true},
    ["opts.port"] = {opts.port, "n", true},
    ["opts.config_file"] = {opts.config_file, "s", true},
    ["opts.output"] = {opts.output, "b", true},
    ; validate launch options
  }
  if opts.output ~= nil then redir_nvim_output = opts.output end
end
; use launch options

;; detect if nvim is blocking
local mode = vim.fn.rpcrequest(nvim_server, "nvim_get_mode")
if mode.blocking then
	vim.api.nvim_echo({{"Neovim is waiting for input at startup. Aborting.", "ErrorMsg"}}, true, {})
	; terminate adapter server process
	return
end

;; abort early if already running
if M.is_running() then
	vim.api.nvim_echo({{"Server is already running.", "ErrorMsg"}}, true, {})
  return
end


;; implement
M.on = {}

;; if exists use custom for launching server
if M.on["start_server"] then
  nvim_server = M.on["start_server"](args, env)
  assert(nvim_server)


;; wait attach blocking
M.prepare_attach(true)
