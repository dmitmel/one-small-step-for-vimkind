;;; lua-debug
;; script variables
local builtin_debug_traceback
local break_on_exception

;; validate launch options new interface
vim.validate("opts.break_on_exception", opts.break_on_exception, 'boolean', true)

;; validate launch options old interface
["opts.break_on_exception"] = {opts.break_on_exception, "b", true},

;; use launch options
break_on_exception = opts and opts.break_on_exception
if break_on_exception == nil then
  break_on_exception = true
end

;; redefine debug traceback
if break_on_exception then
  if not builtin_debug_traceback then
    builtin_debug_traceback = debug.traceback
  end

  debug.traceback = function(...)
    log("debug.traceback " .. vim.inspect({...}))
    ; if osv is not running bail out
    ; if traceback was called explicitly return builtin
    ; save error message
    ; save error stacktrace
    ; send exception stopped event
    ; freeze neovim instance
    return builtin_debug_traceback(...)
  end
end

;; restore debug traceback
if builtin_debug_traceback then
  debug.traceback = builtin_debug_traceback
end

;; if osv is not running bail out
if not M.is_running() then
  if builtin_debug_traceback then
    debug.traceback = builtin_debug_traceback
    return debug.traceback(...)
  end
  log("debug.traceback handle lost")
  return "one-small-step-for-vimkind lost the debug.traceback handle :("
end

;; if traceback was called explicitly return builtin
local off = 0
local called_explicit = false
local called_explicit_level = nil
local sources = {}
while true do
  local succ, info = pcall(debug.getinfo, off)
  if not succ or not info then
    break
  end

  log("STACK " .. (info.name or "[NO NAME]") .. " " .. (info.source or "[NO SOURCE]") .. " " .. info.currentline .. " " .. tostring(info.func == debug.traceback))
  sources[off] = info.source

  if info.func == debug.traceback and info.name == "traceback" then
    called_explicit = true
    called_explicit_level = off
  end
  off = off + 1
end

log("called explicit " .. vim.inspect(called_explicit))
if called_explicit and sources[called_explicit_level+1] ~= "=[C]" then
  log("called explicit source " .. vim.inspect(sources[called_explicit_level+1]))
  return builtin_debug_traceback(...)
end

;; script variables
local exception_error_msg = nil

;; save error message
local traceback_args = { ... }
exception_error_msg = nil
log(vim.inspect({...}))
if #traceback_args > 0 then
  exception_error_msg = traceback_args[1]
end

;; send exception stopped event
local msg = make_event("stopped")
msg.body = {
  reason = "exception",
  threadId = 1,
  text = exception_error_msg 
}
sendProxyDAP(msg)

;; script variables
local exception_stacktrace

;; save error stacktrace
local start_frame = 0
local levels = 1
local skip = 0

; skip internal frames

exception_stacktrace = {}
while true do
  local info = debug.getinfo(skip+levels+start_frame)
  if not info then
    break
  end
  local stack_desc = ""
  stack_desc = (info.short_src or "") .. ":" .. (info.currentline or "")
  if info.name then
    stack_desc = stack_desc .. " in function " .. info.name
  elseif info.what then
    stack_desc = stack_desc .. " in " .. info.what .. " chunk"
  end
  table.insert(exception_stacktrace, stack_desc)
  levels = levels + 1
end

exception_stacktrace = table.concat(exception_stacktrace, "\n")
