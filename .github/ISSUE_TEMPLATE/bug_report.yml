name: üêõ Bug Report
description: Report a broken functionality
labels: [bug]

body:
  - type: markdown
    attributes: 
      value: |
        - Avoid generic or vague titles such as "Something's not working" or "A couple of problems" ‚Äî be as descriptive as possible.
        - Keep your issue focused on one single problem. If you have multiple bug reports, please create a separate issue for each of them.
        - Issues should represent **complete and actionable** work items. If you are unsure about something or have a question, please start a [discussion](https://github.com/jbyuki/one-small-step-for-vimkind/discussions/new) instead.
  - type: textarea
    id: neovim-version
    attributes:
      label: Neovim version ( `:version` )
      placeholder: |
        NVIM v0.12.0-dev-2581+g25947a6eb8
        Build type: RelWithDebInfo
        LuaJIT 2.1.1744317938
    validations:
      required: true
  - type: input
    id: os
    attributes:
      label: Operating System
      placeholder: Ubuntu 24.04.2 LTS
    validations:
      required: true
  - type: textarea
    id: repro
    attributes:
      label: Steps to reproduce
      description: Detailed explanation on how to trigger the bug and if relevant (ex. interaction with another plugin) please specify a minimal config.
      value: |
        1. `mkdir ~/.config/osv_issue`
        2. Create init.lua in the `osv_issue` directory

        ```lua
        -- plugins installation
        local plugins = {
          "mfussenegger/nvim-dap",
          "jbyuki/one-small-step-for-vimkind",
        }
        for _, src in ipairs(plugins) do
        local path = vim.fs.joinpath(vim.fn.stdpath("data"), src:match("/(.*)"))
        src = "https://github.com/" .. src
        if vim.fn.isdirectory(path) == 0 then
        vim.fn.system { 'git', 'clone', '--depth=1', src, path }
        end
        vim.opt.runtimepath:append(path)
        end

        -- if init_debug then
        --  require "osv".launch({ port = 8086, blocking = true })
        -- end

        -- plugins configuration
        vim.g.mapleader = " "
        vim.cmd("colorscheme retrobox")
        vim.api.nvim_set_hl(0, "debugPC", { bg = "#cc241d" })
        local dap = require("dap")
        dap.configurations.lua = { { type = 'nlua', request = 'attach', name = "osv"} }
        dap.adapters.nlua = { type = 'server', host = "127.0.0.1", port = 8086, }
        vim.keymap.set('n', '<leader>db', require"dap".toggle_breakpoint, { noremap = true })
        vim.keymap.set('n', '<leader>dc', require"dap".continue, { noremap = true })
        vim.keymap.set('n', '<leader>do', require"dap".step_over, { noremap = true })
        vim.keymap.set('n', '<leader>di', require"dap".step_into, { noremap = true })

        vim.keymap.set('n', '<leader>dl', function() 
        require"osv".launch({port = 8086}) 
        end, { noremap = true })
        ```

        3. Create test.lua in home

        ```lua
        local sum = 0
        for i=1,10 do
        sum = sum + i
        end
        print(("The sum is %d"):format(sum))
        ```

        4. Launch two neovim instances (A, B)
        5. (A) Open `test.lua`, and place a breakpoint on the first line
        6. (B) Launch `osv`
        7. (A) Connect to (A)
        8. (B) Execute `test.lua` with `:luafile test.lua`
    validations:
      required: true
  - type: textarea
    id: screenshot
    attributes:
      label: Screenshots
      description: If applicable, add screenshots to help explain your problem.
      placeholder: |
        ![DESCRIPTION](LINK.png)
      render: bash
    validations:
      required: false
  - type: textarea
    id: logs
    attributes:
      label: Details
      description: Clear and thorough explanation of the bug, including any additional information you may find relevant.
      placeholder: |
        - Expected behavior: ...
        - Actual behavior: ...
    validations:
      required: true
